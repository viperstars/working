MySQL-python 中 execute 的使用，以及如何防止 SQL 注入

先看一个示例

sql = "select user from mysql.user where user='%s' and password = '%s'"

cur.execute(sql % ('test','test'))
output: 0L

cur._executed
output: "select user from mysql.user where user='test' and password = 'test'"

cur.execute(sql % ("test", "test' or '' = '"))
output: 7L

cur.fetchall()
output: ((u'root',),(u'root',),(u'root',))

cur._executed
output: "select user from mysql.user where user='test' and password = 'test' or '' = ''"

如果 execute 传入一个已经格式化好的 SQL 语句，那么这个语句会直接执行，这样会造成 SQL 注入

但是换另一种方式就有所不同了

sql="select user from mysql.user where user= %s and password = %s"

cur.execute(sql, ("test", "test' or '' = '"))
output: 0L

cur._executed
output:  "select user from mysql.user where user= 'test' and password = 'test\\' or \\'\\' = \\''"

此方式并不是把 SQL 语句格式化好了传入 execute，而是把包括占位符的字符串和格式化时需要的参数传递至 execute

execute 函数如下：

def execute(self, query, args=None):

    del self.messages[:]
    db = self._get_db()
    if isinstance(query, unicode):
        query = query.encode(db.unicode_literal.charset)
    if args is not None:
        if isinstance(args, dict):
            query = query % dict((key, db.literal(item))
                                 for key, item in args.iteritems())
        else:
            query = query % tuple([db.literal(item) for item in args])
    try:
        r = None
        r = self._query(query)
    except TypeError, m:
        if m.args[0] in ("not enough arguments for format string",
                         "not all arguments converted"):
            self.messages.append((ProgrammingError, m.args[0]))
            self.errorhandler(self, ProgrammingError, m.args[0])
        else:
            self.messages.append((TypeError, m))
            self.errorhandler(self, TypeError, m)
    except (SystemExit, KeyboardInterrupt):
        raise
    except:
        exc, value, tb = sys.exc_info()
        del tb
        self.messages.append((exc, value))
        self.errorhandler(self, exc, value)
    self._executed = query
    if not self._defer_warnings: self._warning_check()
    return r
    
其中对格式化时需要的参数做了处理：

if isinstance(args, dict):
    query = query % dict((key, db.literal(item))
                                 for key, item in args.iteritems())
else:
    query = query % tuple([db.literal(item) for item in args])
    
literal 函数如下：

def literal(self, o):
    return self.escape(o, self.encoders)
    
然后 self.escape 找不到了，换成了 pymysql 中倒是定义了

def escape(self, obj, mapping=None):
    if isinstance(obj, str_type):
        return "'" + self.escape_string(obj) + "'"
    return escape_item(obj, self.charset, mapping=mapping)
    
如果传入 obj 是字符串，则调用 self.escape_string，否则使用 escape_item

escape_string 函数 如下：
 
def escape_string(self, s):
    if (self.server_status &
            SERVER_STATUS.SERVER_STATUS_NO_BACKSLASH_ESCAPES):
        return s.replace("'", "''")
    return escape_string(s)

ESCAPE_REGEX = re.compile(r"[\0\n\r\032\'\"\\]")
ESCAPE_MAP = {'\0': '\\0', '\n': '\\n', '\r': '\\r', '\032': '\\Z',
              '\'': '\\\'', '"': '\\"', '\\': '\\\\'}
    
def escape_string(value, mapping=None):
    return ("%s" % (ESCAPE_REGEX.sub(
            lambda match: ESCAPE_MAP.get(match.group(0)), value),))

escape_item 函数如下：           
 
def escape_item(val, charset, mapping=None):
    if mapping is None:
        mapping = encoders
    encoder = mapping.get(type(val))

    # Fallback to default when no encoder found
    if not encoder:
        try:
            encoder = mapping[text_type]
        except KeyError:
            raise TypeError("no default type converter defined")

    if encoder in (escape_dict, escape_sequence):
        val = encoder(val, charset, mapping)
    else:
        val = encoder(val, mapping)
    return val
    
escape_item 会根据传入参数的类型进行转义

所以在以第二种方式传入参数至 execute 中时，传入的参数会经过转义，这样可以一定程度上的避免 SQL 注入

综上所述，正确使用 execute 的方法是

1，先定义好包含占位符的 SQL 语句，%s 前后不带引号

sql="select user from mysql.user where user= %s and password = %s"

2，将 SQL 语句和格式化时需要的的参数一同传递至 execute

cur.execute(sql, ("test", "test' or '' = '"))

PS：传递参数时也可以传入字典，但是包含站位符的 SQL 需要修改

sql="select user from mysql.user where user= %(name)s and password = %(password)s"

cur.execute(sql, {"user":"test", "password":"test' or '' = '"})
